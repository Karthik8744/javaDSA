⭐ Bitwise Operators:
    ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
1. AND(&):
   ‾‾‾‾‾‾
0 & 0 -> 0
0 & 1 -> 0
1 & 0 -> 0
1 & 1 -> 1

2. OR(|):
   ‾‾‾‾‾
0 | 0 -> 0
0 | 1 -> 1
1 | 0 -> 1
1 | 1 -> 1

3. XOR(^):
   ‾‾‾‾‾‾
0 ^ 0 -> 0
0 ^ 1 -> 1
1 ^ 0 -> 1
1 ^ 1 -> 0

4. One's Complement(~):
   ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
0  ->  1
1  ->  0

- But in java one's complement works differently because java uses signed Bits
- In java if we use ~(5)(i.e;101) it gives -6 instead of 2.

5. Left Shift(<<):
   ‾‾‾‾‾‾‾‾‾‾‾‾‾‾
- a << b means the bits in 'a' are moved by 'b' bits towards left
- a << b turns a into ⭐a * (2^b)⭐

6. Rigth Shift(>>):
   ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
- a >> b means the bits in 'a' are moved by 'b' bits towards right
- a >> b turns a into ⭐a / (2^b)⭐