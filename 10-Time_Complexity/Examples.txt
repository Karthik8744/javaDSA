
Code- 1:          Time Complexity: O(n)
for (int i = 0; i < n; i++) {
    // Some constant time
}

Code -2:          Time Complexity: O(n^2)
for (int i = 0; i < n; i++) {
    for(int j = i + 1; j < n; j++) {
        // Some constant time
    }
}

Code- 3:          Time Complexity: O(n^2)
for (int i = 0; i < n; i++) {
    for(int j = 0; j < n; j++) {
        // Some constant time
    }
}

⭐ Code- 4:          Time Complexity: O(n)
// k < n
for (int i = 0; i < n; i = i+k) {
    for(int j = i+1; j <= k; j++) {
        // Some constant time
    }
}

// Bubble Sort
Code- 5:
Worst Time: O(n^2)
Best Time: O(n^2)  if optimized O(n)
for (int i = 0; i < len - 1; i++) {
    boolean swapped = false;
    for (int j = 0; j < len-i-1; j++) {
        if (arr[j] > arr[j+1]) {
            temp = arr[j];
            arr[j] = arr[j+1];
            arr[j+1] = temp; 
            swapped = true;
        }
    }

    if (!swapped) {
        break;
    }
}

// Binary Search
Code- 6:          Time Complexity: O(log n)
static int binarySearch (int[] arr, int key) {
    int start = 0;
    int end = arr.length - 1;
    int mid;
    while(start <= end) {
        mid = (start + end) / 2;
        // Comparisions
        if (key == arr[mid]) {
            return mid;
        }
        if (key > arr[mid]) {
            start = mid + 1;
        }
        else {
            end = mid - 1;
        }
        }
    return -1;
}


Recursion: (Using Recrusive formula from intro.txt)

Code- 1:          space Complexity: O(n)
static int sum (int n) {
    if (n == 0) {
        return 0;
    }

    return n + sum(n-1);
}

// Fibonacci
Code- 1:          space Complexity: O(n)
public class fibonacci {
    static int fib (int n) {
        if (n == 0 || n == 1) {
            return n;
        }
        return fib(n-1) + fib(n-2);
    }
}

16